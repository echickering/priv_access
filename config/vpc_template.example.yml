AWSTemplateFormatVersion: '2010-09-09'
Description: A template to create a VPC, a subnet, and an Internet Gateway.

Parameters:
  NamePrefix:
    Description: All resources created will have this prefix in its name
    Type: String
    Default: ""
  VpcName:
    Description: Name for VPC
    Type: String
    Default: ""
  VpcCidr:
    Description: The CIDR block for the VPC
    Type: String
    Default: ""
  AvailabilityZone1:
    Description: The Availability Zone where the subnets will be created
    Type: String
    Default: ""
  TrustCidrAZ1:
    Description: The CIDR block for the vpc subnet
    Type: String
    Default: ""
  UnTrustCidrAZ1:
    Description: The CIDR block for the vpc subnet
    Type: String
    Default: ""
  TgwId:
    Description: The ID of TGW to attach VPC to
    Type: String
    Default: ""
  TgwCidr:
    Description: The CIDR defined to TGW
    Type: String
    Default: ""

Conditions:
  CreateTgwResources: !And 
    - !Not [!Equals [!Ref TgwId, ""]]
    - !Not [!Equals [!Ref TgwCidr, ""]]

Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VpcName

  UnTrustSubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref UnTrustCidrAZ1
      AvailabilityZone: !Ref AvailabilityZone1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}Untrust"

  TrustSubnetAZ1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref TrustCidrAZ1
      AvailabilityZone: !Ref AvailabilityZone1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}Trust"

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}IGW"

  GatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  UntrustRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}PublicRTB"

  TrustRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}PrivateRTB"

  UntrustRtbAssoc1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref UnTrustSubnetAZ1
      RouteTableId: !Ref UntrustRouteTable

  TrustRtbAssoc1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref TrustSubnetAZ1
      RouteTableId: !Ref TrustRouteTable

  DefaultRoutePublic:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref UntrustRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  DefaultRoutePrivate:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref TrustRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # TgwCidrRoute:
  #   Type: 'AWS::EC2::Route'
  #   Condition: CreateTgwResources
  #   DependsOn:
  #     - "TgwAttach"
  #   Properties:
  #     RouteTableId: !Ref TrustRouteTable
  #     DestinationCidrBlock: !Ref TgwCidr
  #     TransitGatewayId: !Ref TgwId

  # TgwAttach:
  #   Type: AWS::EC2::TransitGatewayAttachment
  #   Condition: CreateTgwResources
  #   Properties:
  #     Options: 
  #       DnsSupport: enable
  #     SubnetIds: 
  #       - !Ref TrustSubnetAZ1
  #     Tags: 
  #       - Key: Name
  #         Value: !Sub "${NamePrefix}TGWAttach"
  #     TransitGatewayId: !Ref TgwId
  #     VpcId: !Ref MyVPC

  # TgwRtb:
  #   Type: AWS::EC2::TransitGatewayRouteTable
  #   Condition: CreateTgwResources
  #   Properties:
  #     Tags: 
  #       - Key: Name
  #         Value: !Sub "${NamePrefix}Rtb"
  #     TransitGatewayId: !Ref TgwId

  # TgwRtbAssociation:
  #   Type: AWS::EC2::TransitGatewayRouteTableAssociation
  #   Condition: CreateTgwResources
  #   Properties:
  #     TransitGatewayAttachmentId: !Ref TgwAttach
  #     TransitGatewayRouteTableId: !Ref TgwRtb

Outputs:
  VpcId:
    Description: The ID of the created VPC
    Value: !Ref MyVPC

  UnTrustIDAZ1:
    Description: The ID of the first Subnet
    Value: !Ref UnTrustSubnetAZ1

  UnTrustCidrAZ1:
    Description: The CIDR of the first Subnet
    Value: !Ref UnTrustCidrAZ1

  TrustIDAZ1:
    Description: The ID of the second Subnet
    Value: !Ref TrustSubnetAZ1

  TrustCidrAZ1:
    Description: The CIDR of the first Subnet
    Value: !Ref TrustCidrAZ1

  # TgwRtb:
  #   Description: RTB Associated GP VPC
  #   Condition: CreateTgwResources
  #   Value: !Ref TgwRtb

  # TgwCidr:
  #   Description: CIDR Associated to TGW
  #   Condition: CreateTgwResources
  #   Value: !Ref TgwCidr